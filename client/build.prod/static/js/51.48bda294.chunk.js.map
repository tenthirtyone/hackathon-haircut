{"version":3,"sources":["components/organization/organization-invite-dialog.js","containers/organization-team.js","icons/plus.js"],"names":["roleOptions","id","description","label","value","OrganizationInviteDialog","props","open","onClose","other","formik","useFormik","initialValues","email","fullName","role","submit","validationSchema","Yup","shape","max","required","oneOf","map","option","onSubmit","values","helpers","a","wait","setStatus","success","setSubmitting","console","error","setErrors","message","Dialog","TransitionProps","onExited","resetForm","handleSubmit","DialogTitle","DialogContent","Grid","container","spacing","item","xs","Boolean","touched","errors","fullWidth","helperText","name","onBlur","handleBlur","onChange","handleChange","type","Typography","color","sx","mb","variant","Card","RadioGroup","index","FormControlLabel","disableTypography","control","Radio","p","length","Divider","FormHelperText","DialogActions","Button","onClick","disabled","isSubmitting","defaultProps","roles","members","avatar","OrganizationTeam","useState","openInvite","setOpenInvite","useEffect","gtm","push","event","CardHeader","action","size","startIcon","title","Table","minWidth","TableHead","TableRow","TableCell","TableBody","member","roleOption","find","Box","alignItems","display","Avatar","alt","src","mr","width","cursor","flexItem","orientation","mx","Plus","createSvgIcon","xmlns","viewBox","fill","fillRule","d","clipRule"],"mappings":"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","file":"static/js/51.48bda294.chunk.js","sourcesContent":["import { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport {\n  Button,\n  Card,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Divider,\n  FormControlLabel,\n  FormHelperText,\n  Grid,\n  Radio,\n  RadioGroup,\n  Typography\n} from '@material-ui/core';\nimport { wait } from '../../utils/wait';\nimport { InputField } from '../input-field';\n\nconst roleOptions = [\n  {\n    id: '1',\n    description: 'Edit access',\n    label: 'Editor',\n    value: 'editor'\n  },\n  {\n    id: '2',\n    description: 'Full access & billing',\n    label: 'Administrator',\n    value: 'administrator'\n  }\n];\n\nexport const OrganizationInviteDialog = (props) => {\n  const { open, onClose, ...other } = props;\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      fullName: '',\n      role: 'editor',\n      submit: null\n    },\n    validationSchema: Yup.object().shape({\n      email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n      fullName: Yup.string().max(255).required('Name is required'),\n      role: Yup.mixed().oneOf(roleOptions.map((option) => option.value))\n    }),\n    onSubmit: async (values, helpers) => {\n      try {\n        await wait(250);\n        helpers.setStatus({ success: true });\n        helpers.setSubmitting(false);\n        onClose?.();\n      } catch (err) {\n        console.error(err);\n        helpers.setStatus({ success: false });\n        helpers.setErrors({ submit: err.message });\n        helpers.setSubmitting(false);\n      }\n    }\n  });\n\n  return (\n    <Dialog\n      onClose={onClose}\n      open={open}\n      TransitionProps={{\n        onExited: () => formik.resetForm()\n      }}\n      {...other}\n    >\n      <form onSubmit={formik.handleSubmit}>\n        <DialogTitle>\n          Invite a team member\n        </DialogTitle>\n        <DialogContent>\n          <Grid\n            container\n            spacing={2}\n          >\n            <Grid\n              item\n              xs={12}\n            >\n              <InputField\n                error={Boolean(formik.touched.fullName && formik.errors.fullName)}\n                fullWidth\n                helperText={formik.touched.fullName && formik.errors.fullName}\n                label=\"Full name\"\n                name=\"fullName\"\n                onBlur={formik.handleBlur}\n                onChange={formik.handleChange}\n                value={formik.values.fullName}\n              />\n            </Grid>\n            <Grid\n              item\n              xs={12}\n            >\n              <InputField\n                error={Boolean(formik.touched.email && formik.errors.email)}\n                fullWidth\n                helperText={formik.touched.email && formik.errors.email}\n                label=\"Email address\"\n                name=\"email\"\n                onBlur={formik.handleBlur}\n                onChange={formik.handleChange}\n                type=\"email\"\n                value={formik.values.email}\n              />\n            </Grid>\n            <Grid\n              item\n              xs={12}\n            >\n              <Typography\n                color=\"textPrimary\"\n                sx={{ mb: 1.5 }}\n                variant=\"subtitle2\"\n              >\n                Role\n              </Typography>\n              <Card variant=\"outlined\">\n                <RadioGroup\n                  name=\"role\"\n                  onBlur={formik.handleBlur}\n                  onChange={formik.handleChange}\n                  value={formik.values.role}\n                >\n                  {roleOptions.map((option, index) => (\n                    <Fragment key={option.id}>\n                      <FormControlLabel\n                        disableTypography\n                        control={<Radio color=\"primary\" />}\n                        label={(\n                          <div>\n                            <Typography\n                              color=\"textPrimary\"\n                              variant=\"body1\"\n                            >\n                              {option.label}\n                            </Typography>\n                            <Typography\n                              color=\"textSecondary\"\n                              variant=\"caption\"\n                            >\n                              {option.description}\n                            </Typography>\n                          </div>\n                        )}\n                        sx={{ p: 1.5 }}\n                        value={option.value}\n                      />\n                      {roleOptions.length > index + 1 && <Divider />}\n                    </Fragment>\n                  ))}\n                </RadioGroup>\n              </Card>\n              {formik.touched.role && formik.errors.role && (\n                <FormHelperText error>\n                  {formik.errors.role}\n                </FormHelperText>\n              )}\n            </Grid>\n            {formik.errors.submit && (\n              <Grid\n                item\n                xs={12}\n              >\n                <FormHelperText error>\n                  {formik.errors.submit}\n                </FormHelperText>\n              </Grid>\n            )}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            color=\"primary\"\n            onClick={onClose}\n            type=\"button\"\n            variant=\"text\"\n          >\n            Cancel\n          </Button>\n          <Button\n            color=\"primary\"\n            type=\"submit\"\n            variant=\"contained\"\n            disabled={formik.isSubmitting}\n          >\n            Send Invite\n          </Button>\n        </DialogActions>\n      </form>\n    </Dialog>\n  );\n};\n\nOrganizationInviteDialog.defaultProps = {\n  open: false\n};\n\nOrganizationInviteDialog.propTypes = {\n  onClose: PropTypes.func,\n  open: PropTypes.bool\n};\n","import { useEffect, useState } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport {\n  Avatar,\n  Box,\n  Button,\n  Card,\n  CardHeader,\n  Divider,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Typography\n} from '@material-ui/core';\nimport { OrganizationInviteDialog } from '../components/organization/organization-invite-dialog';\nimport { Scrollbar } from '../components/scrollbar';\nimport { Plus as PlusIcon } from '../icons/plus';\nimport gtm from '../lib/gtm';\n\nconst roles = [\n  {\n    label: 'Administrator',\n    value: 'administrator'\n  },\n  {\n    label: 'Editor',\n    value: 'editor'\n  }\n];\n\nconst members = [\n  {\n    id: '1',\n    avatar: '/static/user-chen_simmons.png',\n    name: 'Chen Simmons',\n    email: 'chen.simmons@acmecorp.com',\n    role: 'administrator'\n  },\n  {\n    id: '2',\n    avatar: '/static/user-horia_tepar.png',\n    name: 'Horia Tepar',\n    email: 'horia.tepar@acmecorp.com',\n    role: 'editor'\n  }\n];\n\nexport const OrganizationTeam = () => {\n  const [openInvite, setOpenInvite] = useState();\n\n  useEffect(() => {\n    gtm.push({ event: 'page_view' });\n  }, []);\n\n  return (\n    <>\n      <Helmet>\n        <title>Organization: Team | Carpatin Dashboard</title>\n      </Helmet>\n      <Card variant=\"outlined\">\n        <CardHeader\n          action={(\n            <Button\n              color=\"primary\"\n              onClick={() => setOpenInvite(true)}\n              size=\"small\"\n              startIcon={(\n                <PlusIcon />\n              )}\n              variant=\"contained\"\n            >\n              Invite\n            </Button>\n          )}\n          title=\"Members\"\n        />\n        <Divider />\n        <Scrollbar>\n          <Table sx={{ minWidth: 700 }}>\n            <TableHead>\n              <TableRow>\n                <TableCell>\n                  Name\n                </TableCell>\n                <TableCell>\n                  Email\n                </TableCell>\n                <TableCell>\n                  Role\n                </TableCell>\n                <TableCell>\n                  Actions\n                </TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {members.map((member) => {\n                const roleOption = roles.find((option) => option.value === member.role);\n\n                return (\n                  <TableRow key={member.id}>\n                    <TableCell>\n                      <Box\n                        sx={{\n                          alignItems: 'center',\n                          display: 'flex'\n                        }}\n                      >\n                        <Avatar\n                          alt={member.name}\n                          src={member.avatar}\n                          sx={{ mr: 1 }}\n                        />\n                        <Typography\n                          color=\"textPrimary\"\n                          variant=\"subtitle2\"\n                        >\n                          {member.name}\n                        </Typography>\n                      </Box>\n                    </TableCell>\n                    <TableCell>\n                      {member.email}\n                    </TableCell>\n                    <TableCell\n                      sx={{\n                        color: member.role === 'administrator'\n                          ? 'text.secondary'\n                          : 'text.primary'\n                      }}\n                    >\n                      {roleOption.label}\n                    </TableCell>\n                    <TableCell sx={{ width: 145 }}>\n                      <Box sx={{ display: 'flex' }}>\n                        <Typography\n                          color=\"primary\"\n                          sx={{ cursor: 'pointer' }}\n                          variant=\"subtitle2\"\n                        >\n                          Edit\n                        </Typography>\n                        {member.role !== 'administrator' && (\n                          <>\n                            <Divider\n                              flexItem\n                              orientation=\"vertical\"\n                              sx={{ mx: 2 }}\n                            />\n                            <Typography\n                              color=\"primary\"\n                              sx={{ cursor: 'pointer' }}\n                              variant=\"subtitle2\"\n                            >\n                              Remove\n                            </Typography>\n                          </>\n                        )}\n                      </Box>\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </Scrollbar>\n      </Card>\n      <OrganizationInviteDialog\n        onClose={() => setOpenInvite(false)}\n        open={openInvite}\n      />\n    </>\n  );\n};\n","import { createSvgIcon } from '@material-ui/core/utils';\n\nexport const Plus = createSvgIcon(\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 20 20\"\n    fill=\"currentColor\"\n  >\n    <path\n      fillRule=\"evenodd\"\n      d=\"M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z\"\n      clipRule=\"evenodd\"\n    />\n  </svg>, 'Plus'\n);\n"],"sourceRoot":""}