{"version":3,"sources":["components/organization/organization-billing-info.js","components/organization/organization-billing-plan.js","containers/organization-billing.js","components/property-list-item.js","components/property-list.js"],"names":["OrganizationBillingInfo","align","useMediaQuery","theme","breakpoints","down","Card","variant","CardHeader","action","Button","color","size","title","Divider","divider","label","value","planOptions","id","description","priceOptions","chargeType","amount","OrganizationBillingPlan","formik","useFormik","initialValues","plan","submit","validationSchema","Yup","shape","oneOf","map","option","onSubmit","values","helpers","a","toast","success","setStatus","setSubmitting","err","console","error","setErrors","message","useState","setChargeType","Box","sx","alignItems","display","px","py","Typography","mr","ToggleButtonGroup","exclusive","onChange","event","newMode","ToggleButton","RadioGroup","name","onBlur","handleBlur","handleChange","FormControlLabel","disableTypography","control","Radio","width","flexGrow","numeral","find","priceOption","format","m","touched","errors","FormHelperText","mt","CardActions","disabled","isSubmitting","onClick","handleSubmit","OrganizationBilling","showAlert","setShowAlert","mdDown","useEffect","gtm","push","backgroundColor","Grid","container","spacing","item","xs","md","component","Alert","onClose","severity","PropertyListItem","props","children","other","disableGutters","primary","minWidth","secondary","flex","flexDirection","my","defaultProps","PropertyList","disablePadding"],"mappings":"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","file":"static/js/42.4af2c1a3.chunk.js","sourcesContent":["import { Button, Card, CardHeader, Divider, useMediaQuery } from '@material-ui/core';\nimport { PropertyList } from '../property-list';\nimport { PropertyListItem } from '../property-list-item';\n\nexport const OrganizationBillingInfo = () => {\n  const mdDown = useMediaQuery((theme) => theme.breakpoints.down('md'));\n\n  const align = mdDown ? 'vertical' : 'horizontal';\n\n  return (\n    <Card variant=\"outlined\">\n      <CardHeader\n        action={(\n          <Button\n            color=\"primary\"\n            size=\"small\"\n            variant=\"text\"\n          >\n            Edit\n          </Button>\n        )}\n        title=\"Billing Information\"\n      />\n      <Divider />\n      <PropertyList>\n        <PropertyListItem\n          align={align}\n          divider\n          label=\"Name/Company\"\n          value=\"Acme INC\"\n        />\n        <PropertyListItem\n          align={align}\n          divider\n          label=\"Country\"\n          value=\"Germany\"\n        />\n        <PropertyListItem\n          align={align}\n          divider\n          label=\"Zip Code\"\n          value=\"6753454\"\n        />\n        <PropertyListItem\n          align={align}\n          label=\"City\"\n          value=\"Berlin\"\n        />\n      </PropertyList>\n    </Card>\n  );\n};\n","import { Fragment, useState } from 'react';\nimport toast from 'react-hot-toast';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport numeral from 'numeral';\nimport {\n  Box,\n  Button,\n  Card,\n  CardActions,\n  CardHeader,\n  Divider,\n  FormControlLabel,\n  FormHelperText,\n  Radio,\n  RadioGroup,\n  ToggleButton,\n  ToggleButtonGroup,\n  Typography\n} from '@material-ui/core';\n\nconst planOptions = [\n  {\n    id: '1',\n    description: 'Up to 2 team members',\n    label: 'Free',\n    priceOptions: [\n      {\n        chargeType: 'monthly',\n        amount: 0\n      },\n      {\n        chargeType: 'yearly',\n        amount: 0\n      }\n    ],\n    value: 'free'\n  },\n  {\n    id: '2',\n    description: 'Best for simple projects or applications.',\n    label: 'Essential',\n    priceOptions: [\n      {\n        chargeType: 'monthly',\n        amount: 120\n      },\n      {\n        chargeType: 'yearly',\n        amount: 1320\n      }\n    ],\n    value: 'essential'\n  },\n  {\n    id: '3',\n    description: 'Best for teams and multiple projects that need added security.',\n    label: 'Professional',\n    priceOptions: [\n      {\n        chargeType: 'monthly',\n        amount: 480\n      },\n      {\n        chargeType: 'yearly',\n        amount: 5280\n      }\n    ],\n    value: 'professional'\n  }\n];\n\nexport const OrganizationBillingPlan = () => {\n  const formik = useFormik({\n    initialValues: {\n      plan: 'free',\n      submit: null\n    },\n    validationSchema: Yup.object().shape({\n      plan: Yup.mixed().oneOf(planOptions.map((option) => option.value))\n    }),\n    onSubmit: async (values, helpers) => {\n      try {\n        toast.success('Plan updated');\n        helpers.setStatus({ success: true });\n        helpers.setSubmitting(false);\n      } catch (err) {\n        console.error(err);\n        helpers.setStatus({ success: false });\n        helpers.setErrors({ submit: err.message });\n        helpers.setSubmitting(false);\n      }\n    }\n  });\n  const [chargeType, setChargeType] = useState('monthly');\n\n  const handleChargeTypeChange = (event, newMode) => {\n    if (newMode) {\n      setChargeType(newMode);\n    }\n  };\n\n  return (\n    <Card variant=\"outlined\">\n      <CardHeader title=\"Subscription Plan\" />\n      <Divider />\n      <Box\n        sx={{\n          alignItems: 'center',\n          display: 'flex',\n          px: 3,\n          py: 2\n        }}\n      >\n        <Typography\n          color=\"textPrimary\"\n          sx={{ mr: 3 }}\n          variant=\"subtitle2\"\n        >\n          Billing\n        </Typography>\n        <ToggleButtonGroup\n          exclusive\n          onChange={handleChargeTypeChange}\n          size=\"small\"\n          value={chargeType}\n        >\n          <ToggleButton value=\"monthly\">\n            Monthly\n          </ToggleButton>\n          <ToggleButton value=\"yearly\">\n            Yearly\n          </ToggleButton>\n        </ToggleButtonGroup>\n      </Box>\n      <Divider />\n      <RadioGroup\n        name=\"plan\"\n        onBlur={formik.handleBlur}\n        onChange={formik.handleChange}\n        value={formik.values.plan}\n      >\n        {planOptions.map((option) => (\n          <Fragment key={option.id}>\n            <FormControlLabel\n              disableTypography\n              control={<Radio color=\"primary\" />}\n              label={(\n                <Box\n                  sx={{\n                    alignItems: 'center',\n                    display: 'flex',\n                    width: '100%'\n                  }}\n                >\n                  <div>\n                    <Typography\n                      color=\"textPrimary\"\n                      variant=\"body1\"\n                    >\n                      {option.label}\n                    </Typography>\n                    <Typography\n                      color=\"textSecondary\"\n                      variant=\"caption\"\n                    >\n                      {option.description}\n                    </Typography>\n                  </div>\n                  <Box sx={{ flexGrow: 1 }} />\n                  <Typography\n                    color=\"textPrimary\"\n                    variant=\"h5\"\n                  >\n                    {numeral(option\n                      .priceOptions\n                      .find((priceOption) => priceOption.chargeType === chargeType)\n                      .amount).format('$0,0')}\n                  </Typography>\n                </Box>\n              )}\n              sx={{\n                m: 0,\n                px: 3,\n                py: 1.5\n              }}\n              value={option.value}\n            />\n            <Divider />\n          </Fragment>\n        ))}\n      </RadioGroup>\n      {formik.touched.plan && formik.errors.plan && (\n        <FormHelperText error>\n          {formik.errors.plan}\n        </FormHelperText>\n      )}\n      {formik.errors.submit && (\n        <FormHelperText\n          error\n          sx={{ mt: 2 }}\n        >\n          {formik.errors.submit}\n        </FormHelperText>\n      )}\n      <CardActions>\n        <Button\n          color=\"primary\"\n          disabled={formik.isSubmitting}\n          onClick={() => formik.handleSubmit()}\n          variant=\"contained\"\n        >\n          Upgrade Plan\n        </Button>\n      </CardActions>\n    </Card>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { Alert, Box, Card, Grid, useMediaQuery } from '@material-ui/core';\nimport { OrganizationBillingInfo } from '../components/organization/organization-billing-info';\nimport { OrganizationBillingPlan } from '../components/organization/organization-billing-plan';\nimport { PropertyListItem } from '../components/property-list-item';\nimport gtm from '../lib/gtm';\n\nexport const OrganizationBilling = () => {\n  const [showAlert, setShowAlert] = useState(true);\n  const mdDown = useMediaQuery((theme) => theme.breakpoints.down('md'));\n\n  useEffect(() => {\n    gtm.push({ event: 'page_view' });\n  }, []);\n\n  const align = mdDown ? 'horizontal' : 'vertical';\n\n  return (\n    <>\n      <Helmet>\n        <title>Organization: Billing | Carpatin Dashboard</title>\n      </Helmet>\n      <Box sx={{ backgroundColor: 'background.default' }}>\n        <Grid\n          container\n          spacing={3}\n        >\n          <Grid\n            item\n            xs={12}\n          >\n            <Card variant=\"outlined\">\n              <Grid container>\n                <Grid\n                  item\n                  md={4}\n                  xs={12}\n                >\n                  <PropertyListItem\n                    align={align}\n                    component=\"div\"\n                    label=\"Plan Selected\"\n                    value=\"Free\"\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={4}\n                  xs={12}\n                >\n                  <PropertyListItem\n                    align={align}\n                    component=\"div\"\n                    label=\"Team members\"\n                    value=\"2\"\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={4}\n                  xs={12}\n                >\n                  <PropertyListItem\n                    align={align}\n                    component=\"div\"\n                    label=\"Users\"\n                    value=\"7000\"\n                  />\n                </Grid>\n              </Grid>\n            </Card>\n          </Grid>\n          <Grid\n            item\n            xs={12}\n          >\n            <OrganizationBillingInfo />\n          </Grid>\n          {showAlert && (\n            <Grid\n              item\n              xs={12}\n            >\n              <Alert\n                onClose={() => setShowAlert(false)}\n                severity=\"info\"\n              >\n                You will be charged starting 07/22/2021\n              </Alert>\n            </Grid>\n          )}\n          <Grid\n            item\n            xs={12}\n          >\n            <OrganizationBillingPlan />\n          </Grid>\n        </Grid>\n      </Box>\n    </>\n  );\n};\n","import PropTypes from 'prop-types';\nimport { Box, ListItem, ListItemText, Typography } from '@material-ui/core';\n\nexport const PropertyListItem = (props) => {\n  const { align, children, component, value, label, ...other } = props;\n\n  return (\n    <ListItem\n      component={component}\n      disableGutters\n      sx={{\n        px: 3,\n        py: 1.5\n      }}\n      {...other}\n    >\n      <ListItemText\n        disableTypography\n        primary={(\n          <Typography\n            color=\"textPrimary\"\n            sx={{ minWidth: align === 'vertical' ? 'inherit' : 180 }}\n            variant=\"subtitle2\"\n          >\n            {label}\n          </Typography>\n        )}\n        secondary={(\n          <Box\n            sx={{\n              flex: 1,\n              mt: align === 'vertical' ? 0.5 : 0\n            }}\n          >\n            {children || (\n              <Typography\n                color=\"textSecondary\"\n                variant=\"body2\"\n              >\n                {value}\n              </Typography>\n            )}\n          </Box>\n        )}\n        sx={{\n          alignItems: 'flex-start',\n          display: 'flex',\n          flexDirection: align === 'vertical' ? 'column' : 'row',\n          my: 0\n        }}\n      />\n    </ListItem>\n  );\n};\n\nPropertyListItem.defaultProps = {\n  align: 'vertical'\n};\n\nPropertyListItem.propTypes = {\n  align: PropTypes.string,\n  component: PropTypes.elementType,\n  children: PropTypes.node,\n  label: PropTypes.string.isRequired,\n  value: PropTypes.string\n};\n","import PropTypes from 'prop-types';\nimport { List } from '@material-ui/core';\n\nexport const PropertyList = (props) => {\n  const { children } = props;\n\n  return (\n    <List disablePadding>\n      {children}\n    </List>\n  );\n};\n\nPropertyList.propTypes = {\n  children: PropTypes.node\n};\n"],"sourceRoot":""}