{"version":3,"sources":["containers/invoice-create.js","icons/plus.js","icons/trash.js","components/date-field.js"],"names":["InvoiceCreate","formik","useFormik","enableReinitialize","initialValues","customerEmail","customerName","dueDate","id","issueDate","isTaxable","items","description","price","quantity","note","subject","submit","validationSchema","Yup","shape","email","max","required","of","min","onSubmit","values","helpers","a","toast","success","setStatus","setSubmitting","err","console","error","setErrors","message","totalInvoicePrice","reduce","acc","item","Number","parseFloat","getItemError","index","property","touched","errors","sx","backgroundColor","flexGrow","maxWidth","py","mb","color","component","RouterLink","startIcon","to","variant","handleSubmit","container","spacing","md","xs","Boolean","fullWidth","helperText","label","name","onBlur","handleBlur","onChange","handleChange","value","disabled","placeholder","type","date","setFieldValue","map","totalPrice","display","InputProps","startAdornment","position","isNaN","ml","mt","onClick","itemIndex","length","filter","alignItems","fontSize","mr","numeral","format","control","checked","event","target","multiline","rows","justifyContent","Plus","createSvgIcon","xmlns","viewBox","fill","fillRule","d","clipRule","Trash","DateField","props","other","renderInput","rest","borderWidth","borderStyle","borderColor","borderRadius","boxShadow","px","transition","theme","transitions","create","alpha","palette","primary","main","height","lineHeight","p","disableUnderline","InputLabelProps","shrink","fontWeight","transform"],"mappings":"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","file":"static/js/37.5db6f3ab.chunk.js","sourcesContent":["import { Fragment } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { Helmet } from 'react-helmet-async';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport numeral from 'numeral';\nimport toast from 'react-hot-toast';\nimport {\n  Box,\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  Checkbox,\n  Container,\n  Divider,\n  FormControlLabel,\n  Grid,\n  IconButton,\n  InputAdornment,\n  Typography\n} from '@material-ui/core';\nimport { DateField } from '../components/date-field';\nimport { InputField } from '../components/input-field';\nimport { ArrowLeft as ArrowLeftIcon } from '../icons/arrow-left';\nimport { Plus as PlusIcon } from '../icons/plus';\nimport { Trash as TrashIcon } from '../icons/trash';\n\nexport const InvoiceCreate = () => {\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      customerEmail: '',\n      customerName: '',\n      dueDate: null,\n      id: '#DEV5438',\n      issueDate: null,\n      isTaxable: false,\n      items: [\n        {\n          description: '',\n          price: '',\n          quantity: 1\n        }\n      ],\n      note: '',\n      subject: '',\n      submit: null\n    },\n    validationSchema: Yup.object().shape({\n      customerEmail: Yup.string().email().max(255).required('Customer email is required'),\n      customerName: Yup.string().max(255).required('Customer name is required'),\n      dueDate: Yup.date().required('Due date is required'),\n      issueDate: Yup.date().required('Issued date is required'),\n      isTaxable: Yup.boolean().required('Taxable is required'),\n      items: Yup.array().of(Yup.object().shape({\n        description: Yup.string().max(255).required('Service description is required'),\n        quantity: Yup.number().min(1).required('Quantity is required'),\n        price: Yup.number().required('Price is required')\n      })),\n      note: Yup.string().max(1024),\n      subject: Yup.string().max(255).required('Subject is required')\n    }),\n    onSubmit: async (values, helpers) => {\n      try {\n        toast.success('Invoice created');\n        helpers.setStatus({ success: true });\n        helpers.setSubmitting(false);\n      } catch (err) {\n        console.error(err);\n        helpers.setStatus({ success: false });\n        helpers.setErrors({ submit: err.message });\n        helpers.setSubmitting(false);\n      }\n    }\n  });\n\n  const handleAddItem = () => {\n    formik.setFieldValue('items', [\n      ...formik.values.items, {\n        description: '',\n        price: '',\n        quantity: 1\n      }\n    ]);\n  };\n\n  const handleDeleteItem = (itemIndex) => {\n    if (formik.values.items.length > 1) {\n      formik.setFieldValue('items',\n        formik.values.items.filter((item, index) => index !== itemIndex));\n    }\n  };\n\n  const totalInvoicePrice = formik.values.items.reduce((acc, item) => acc\n    + (Number.parseFloat(item.price) * item.quantity), 0);\n\n  const getItemError = (index, property) => formik?.touched?.items\n    && formik?.errors?.items\n    && formik?.touched?.items[index]?.[property]\n    && formik?.errors?.items[index]?.[property];\n\n  return (\n    <>\n      <Helmet>\n        <title>Invoice: Create | Carpatin Dashboard</title>\n      </Helmet>\n      <Box\n        sx={{\n          backgroundColor: 'background.default',\n          flexGrow: 1\n        }}\n      >\n        <Container maxWidth=\"lg\">\n          <Box sx={{ py: 4 }}>\n            <Box sx={{ mb: 2 }}>\n              <Button\n                color=\"primary\"\n                component={RouterLink}\n                startIcon={<ArrowLeftIcon />}\n                to=\"/dashboard/invoices\"\n                variant=\"text\"\n              >\n                Invoices\n              </Button>\n            </Box>\n            <Typography\n              color=\"textPrimary\"\n              variant=\"h4\"\n            >\n              Create Invoice\n            </Typography>\n          </Box>\n          <Card variant=\"outlined\">\n            <form onSubmit={formik.handleSubmit}>\n              <CardContent>\n                <Grid\n                  container\n                  spacing={2}\n                >\n                  <Grid\n                    item\n                    md={6}\n                    xs={12}\n                  >\n                    <InputField\n                      error={Boolean(formik.touched.subject && formik.errors.subject)}\n                      fullWidth\n                      helperText={formik.touched.subject && formik.errors.subject}\n                      label=\"Subject\"\n                      name=\"subject\"\n                      onBlur={formik.handleBlur}\n                      onChange={formik.handleChange}\n                      value={formik.values.subject}\n                    />\n                  </Grid>\n                  <Grid\n                    item\n                    md={6}\n                    xs={12}\n                  >\n                    <InputField\n                      disabled\n                      error={Boolean(formik.touched.id && formik.errors.id)}\n                      fullWidth\n                      helperText={formik.touched.id && formik.errors.id}\n                      label=\"Invoice #\"\n                      name=\"id\"\n                      onBlur={formik.handleBlur}\n                      onChange={formik.handleChange}\n                      value={formik.values.id}\n                    />\n                  </Grid>\n                  <Grid\n                    item\n                    md={6}\n                    xs={12}\n                  >\n                    <InputField\n                      error={Boolean(formik.touched.customerName\n                        && formik.errors.customerName)}\n                      fullWidth\n                      helperText={formik.touched.customerName\n                      && formik.errors.customerName}\n                      label=\"Customer Name\"\n                      name=\"customerName\"\n                      onBlur={formik.handleBlur}\n                      onChange={formik.handleChange}\n                      placeholder=\"Dinesh Chugtai\"\n                      value={formik.values.customerName}\n                    />\n                  </Grid>\n                  <Grid\n                    item\n                    md={6}\n                    xs={12}\n                  >\n                    <InputField\n                      error={Boolean(formik.touched.customerEmail\n                        && formik.errors.customerEmail)}\n                      fullWidth\n                      helperText={formik.touched.customerEmail\n                      && formik.errors.customerEmail}\n                      label=\"Customer Email\"\n                      name=\"customerEmail\"\n                      onBlur={formik.handleBlur}\n                      onChange={formik.handleChange}\n                      type=\"email\"\n                      placeholder=\"dinesh@pipedpiper.com\"\n                      value={formik.values.customerEmail}\n                    />\n                  </Grid>\n                  <Grid\n                    item\n                    md={6}\n                    xs={12}\n                  >\n                    <DateField\n                      error={Boolean(formik.touched.issueDate && formik.errors.issueDate)}\n                      fullWidth\n                      helperText={formik.touched.issueDate && formik.errors.issueDate}\n                      label=\"Issued Date\"\n                      name=\"issueDate\"\n                      onChange={(date) => formik.setFieldValue('issueDate', date)}\n                      value={formik.values.issueDate}\n                    />\n                  </Grid>\n                  <Grid\n                    item\n                    md={6}\n                    xs={12}\n                  >\n                    <DateField\n                      error={Boolean(formik.touched.dueDate && formik.errors.dueDate)}\n                      fullWidth\n                      helperText={formik.touched.dueDate && formik.errors.dueDate}\n                      label=\"Due Date\"\n                      name=\"dueDate\"\n                      onChange={(date) => formik.setFieldValue('dueDate', date)}\n                      value={formik.values.dueDate}\n                    />\n                  </Grid>\n                  <Grid\n                    item\n                    xs={12}\n                  >\n                    <Divider />\n                  </Grid>\n                  {formik.values.items.map((item, index) => {\n                    const totalPrice = Number.parseFloat(item.price) * item.quantity;\n\n                    return (\n                      // eslint-disable-next-line react/no-array-index-key\n                      <Fragment key={index}>\n                        <Grid\n                          item\n                          md={6}\n                          xs={12}\n                        >\n                          <InputField\n                            error={Boolean(getItemError(index, 'description'))}\n                            fullWidth\n                            helperText={getItemError(index, 'description')}\n                            label=\"Item\"\n                            name={`items[${index}].description`}\n                            onBlur={formik.handleBlur}\n                            onChange={formik.handleChange}\n                            placeholder=\"Service description\"\n                            value={item.description}\n                          />\n                        </Grid>\n                        <Grid\n                          item\n                          md={6}\n                          xs={12}\n                          sx={{ display: 'flex' }}\n                        >\n                          <Grid\n                            container\n                            spacing={2}\n                          >\n                            <Grid\n                              item\n                              xs={4}\n                            >\n                              <InputField\n                                error={Boolean(getItemError(index, 'quantity'))}\n                                fullWidth\n                                helperText={getItemError(index, 'quantity')}\n                                label=\"Qty\"\n                                name={`items[${index}].quantity`}\n                                onBlur={formik.handleBlur}\n                                onChange={formik.handleChange}\n                                value={item.quantity}\n                              />\n                            </Grid>\n                            <Grid\n                              item\n                              xs={4}\n                            >\n                              <InputField\n                                error={Boolean(getItemError(index, 'price'))}\n                                fullWidth\n                                helperText={getItemError(index, 'price')}\n                                label=\"Price\"\n                                name={`items[${index}].price`}\n                                onBlur={formik.handleBlur}\n                                onChange={formik.handleChange}\n                                value={item.price}\n                                InputProps={{\n                                  startAdornment: (\n                                    <InputAdornment position=\"start\">$</InputAdornment>\n                                  )\n                                }}\n                              />\n                            </Grid>\n                            <Grid\n                              item\n                              xs={4}\n                            >\n                              <InputField\n                                disabled\n                                fullWidth\n                                label=\"Total\"\n                                onBlur={formik.handleBlur}\n                                onChange={formik.handleChange}\n                                value={Number.isNaN(totalPrice) ? '' : totalPrice}\n                                InputProps={{\n                                  startAdornment: (\n                                    <InputAdornment position=\"start\">$</InputAdornment>\n                                  )\n                                }}\n                              />\n                            </Grid>\n                          </Grid>\n                          <Box\n                            sx={{\n                              ml: 2,\n                              mt: 3\n                            }}\n                          >\n                            <IconButton\n                              color=\"primary\"\n                              onClick={() => handleDeleteItem(index)}\n                              type=\"button\"\n                            >\n                              <TrashIcon />\n                            </IconButton>\n                          </Box>\n                        </Grid>\n                      </Fragment>\n                    );\n                  })}\n                  <Grid\n                    item\n                    xs={12}\n                    sx={{\n                      alignItems: 'center',\n                      display: 'flex'\n                    }}\n                  >\n                    <Button\n                      color=\"primary\"\n                      onClick={handleAddItem}\n                      startIcon={<PlusIcon fontSize=\"small\" />}\n                      variant=\"text\"\n                    >\n                      Add Item\n                    </Button>\n                    <Box sx={{ flexGrow: 1 }} />\n                    <Typography\n                      color=\"textSecondary\"\n                      sx={{ mr: 1 }}\n                      variant=\"subtitle2\"\n                    >\n                      Total\n                    </Typography>\n                    <Typography\n                      color=\"textPrimary\"\n                      variant=\"h6\"\n                    >\n                      {numeral(totalInvoicePrice).format('$0,0.00')}\n                    </Typography>\n                  </Grid>\n                  <Grid\n                    item\n                    xs={12}\n                  >\n                    <FormControlLabel\n                      control={(\n                        <Checkbox\n                          checked={formik.values.isTaxable}\n                          onChange={(event) => formik.setFieldValue('isTaxable',\n                            event.target.checked)}\n                        />\n                      )}\n                      label=\"Taxable (VAT 19%)\"\n                    />\n                  </Grid>\n                  <Grid\n                    item\n                    xs={12}\n                  >\n                    <Divider />\n                  </Grid>\n                  <Grid\n                    item\n                    xs={12}\n                  >\n                    <InputField\n                      error={Boolean(formik.touched.note && formik.errors.note)}\n                      fullWidth\n                      helperText={formik.touched.note && formik.errors.note}\n                      label=\"Additional Notes\"\n                      multiline\n                      name=\"note\"\n                      onBlur={formik.handleBlur}\n                      onChange={formik.handleChange}\n                      placeholder=\"Client notes\"\n                      rows={4}\n                      value={formik.values.note}\n                    />\n                  </Grid>\n                </Grid>\n              </CardContent>\n              <CardActions sx={{ justifyContent: 'flex-end' }}>\n                <Button\n                  color=\"primary\"\n                  type=\"submit\"\n                  variant=\"contained\"\n                >\n                  Create Invoice\n                </Button>\n              </CardActions>\n            </form>\n          </Card>\n        </Container>\n      </Box>\n    </>\n  );\n};\n","import { createSvgIcon } from '@material-ui/core/utils';\n\nexport const Plus = createSvgIcon(\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 20 20\"\n    fill=\"currentColor\"\n  >\n    <path\n      fillRule=\"evenodd\"\n      d=\"M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z\"\n      clipRule=\"evenodd\"\n    />\n  </svg>, 'Plus'\n);\n","import { createSvgIcon } from '@material-ui/core/utils';\n\nexport const Trash = createSvgIcon(\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 20 20\"\n    fill=\"currentColor\"\n  >\n    <path\n      fillRule=\"evenodd\"\n      d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\"\n      clipRule=\"evenodd\"\n    />\n  </svg>, 'Trash'\n);\n","import PropTypes from 'prop-types';\nimport { TextField } from '@material-ui/core';\nimport { alpha } from '@material-ui/core/styles';\nimport DatePicker from '@material-ui/lab/DatePicker';\n\nexport const DateField = (props) => {\n  const {\n    error,\n    fullWidth,\n    helperText,\n    label,\n    onChange,\n    placeholder,\n    value,\n    name,\n    ...other\n  } = props;\n\n  return (\n    <DatePicker\n      onChange={onChange}\n      renderInput={({ InputProps, ...rest }) => (\n        <TextField\n          {...rest}\n          name={name}\n          error={error}\n          fullWidth={fullWidth}\n          helperText={helperText}\n          label={label}\n          placeholder={placeholder}\n          sx={{\n            '& .MuiFilledInput-root': {\n              backgroundColor: 'background.paper',\n              borderWidth: 1,\n              borderStyle: 'solid',\n              borderColor: 'neutral.300',\n              borderRadius: 1,\n              boxShadow: '0px 1px 2px 0px rgba(9, 30, 66, 0.08)',\n              px: 1.5,\n              py: 0.75,\n              transition: (theme) => theme.transitions.create([\n                'border-color',\n                'box-shadow'\n              ]),\n              '&:hover': {\n                backgroundColor: 'background.paper'\n              },\n              '&.Mui-focused': {\n                backgroundColor: 'background.paper',\n                boxShadow: (theme) => `${alpha(theme.palette.primary.main,\n                  0.25)} 0 0 0 0.2rem`\n              },\n              '& .MuiFilledInput-input': {\n                fontSize: 14,\n                height: 'unset',\n                lineHeight: 1.6,\n                p: 0\n              },\n              '&.Mui-disabled': {\n                backgroundColor: 'action.disabledBackground',\n                boxShadow: 'none',\n                borderColor: alpha('#D6DBE1', 0.5)\n              }\n            }\n          }}\n          variant=\"filled\"\n          InputProps={{\n            disableUnderline: true,\n            ...InputProps\n          }}\n          InputLabelProps={{\n            shrink: true,\n            sx: {\n              color: 'text.primary',\n              fontSize: 14,\n              fontWeight: 500,\n              mb: 0.5,\n              position: 'relative',\n              transform: 'none'\n            }\n          }}\n        />\n      )}\n      value={value}\n      {...other}\n    />\n  );\n};\n\nDateField.propTypes = {\n  error: PropTypes.bool,\n  fullWidth: PropTypes.bool,\n  helperText: PropTypes.string,\n  label: PropTypes.string,\n  name: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  placeholder: PropTypes.string,\n  value: PropTypes.instanceOf(Date)\n};\n"],"sourceRoot":""}