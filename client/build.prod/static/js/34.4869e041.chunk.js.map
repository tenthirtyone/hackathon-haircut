{"version":3,"sources":["containers/product-inventory.js","icons/plus.js","icons/refresh.js","icons/question-mark-outlined.js","components/resource-error.js","components/resource-unavailable.js"],"names":["VariantTableRow","props","onSaveQuantity","variant","other","useState","mode","setMode","quantity","setQuantity","parsedQuantity","Number","parseInt","sx","alignItems","display","src","image","mr","color","name","numeral","price","format","sku","width","exclusive","onChange","event","newMode","value","inputProps","px","py","target","borderColor","borderRadius","borderStyle","borderWidth","maxHeight","mx","type","disabled","isNaN","onClick","id","ProductInventory","mounted","useMounted","isLoading","productState","setProductState","variants","setVariants","getProduct","useCallback","a","productApi","result","current","data","console","error","message","useEffect","catch","gtm","push","temp","index","findIndex","displayLoading","displayError","Boolean","displayUnavailable","length","backgroundColor","flexGrow","minHeight","flexDirection","title","minWidth","map","p","height","m","Plus","createSvgIcon","xmlns","viewBox","fill","fillRule","d","clipRule","Refresh","QuestionMarkOutlined","className","stroke","strokeLinecap","strokeLinejoin","strokeWidth","ResourceErrorRoot","styled","theme","palette","neutral","justifyContent","padding","spacing","ResourceError","onReload","mt","startIcon","fontSize","ResourceUnavailableRoot","ResourceUnavailable","onCreate"],"mappings":"6gBA8BMA,EAAkB,SAACC,GACvB,IAAQC,EAAsCD,EAAtCC,eAAgBC,EAAsBF,EAAtBE,QAAYC,EAApC,YAA8CH,EAA9C,GACA,EAAwBI,mBAAS,OAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACMC,EAAiBC,OAAOC,SAASJ,EAAU,IAiBjD,OACE,eAAC,IAAD,2BAAcJ,GAAd,cACE,cAAC,IAAD,UACE,eAAC,IAAD,CACES,GAAI,CACFC,WAAY,SACZC,QAAS,QAHb,UAME,cAAC,IAAD,CACEC,IAAKb,EAAQc,MACbJ,GAAI,CAAEK,GAAI,GACVf,QAAQ,UAHV,SAKE,cAAC,IAAD,MAEF,cAAC,IAAD,CACEgB,MAAM,UACNhB,QAAQ,QAFV,SAIGA,EAAQiB,YAIf,cAAC,IAAD,UACGjB,EAAQK,WAEX,cAAC,IAAD,UACGa,IAAQlB,EAAQmB,OAAOC,OAAO,aAEjC,cAAC,IAAD,UACGpB,EAAQqB,MAEX,cAAC,IAAD,CAAWX,GAAI,CAAEY,MAAO,KAAxB,SACE,eAAC,IAAD,CAAKZ,GAAI,CAAEE,QAAS,QAApB,UACE,eAAC,IAAD,CACEW,WAAS,EACTC,SApDe,SAACC,EAAOC,GAC3BA,GACFtB,EAAQsB,IAmDFC,MAAOxB,EAHT,UAKE,cAAC,IAAD,CAAcwB,MAAM,MAApB,iBACA,cAAC,IAAD,CAAcA,MAAM,MAApB,oBAEF,cAAC,IAAD,CACEC,WAAY,CACVlB,GAAI,CACFmB,GAAI,IACJC,GAAI,OAGRN,SA3DmB,SAACC,GAC5BnB,EAAYmB,EAAMM,OAAOJ,QA2DjBjB,GAAI,CACFsB,YAAa,cACbC,aAAc,EACdC,YAAa,QACbC,YAAa,EACbC,UAAW,GACXC,GAAI,GAENC,KAAK,SACLX,MAAOtB,IAET,cAAC,IAAD,CACEW,MAAM,UACNuB,SAAU/B,OAAOgC,MAAMjC,IACpBA,EAAiB,GACG,IAAnBA,GAAiC,QAATJ,EAC5BsC,QAxEiB,WACX,OAAd1C,QAAc,IAAdA,KAAiBC,EAAQ0C,GAAInC,EAAgBJ,GAC7CG,EAAY,KAuEJN,QAAQ,YANV,4BAqBG2C,EAAmB,WAC9B,IAAMC,EAAUC,cAChB,EAAwC3C,mBAAS,CAAE4C,WAAW,IAA9D,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAgC9C,mBAAS,IAAzC,mBAAO+C,EAAP,KAAiBC,EAAjB,KAEMC,EAAaC,sBAAW,sBAAC,4BAAAC,EAAA,6DAC7BL,GAAgB,iBAAO,CAAEF,WAAW,MADP,kBAINQ,IAAWH,aAJL,OAIrBI,EAJqB,OAMvBX,EAAQY,SACVR,GAAgB,iBAAO,CACrBF,WAAW,EACXW,KAAMF,MATiB,gDAa3BG,QAAQC,MAAR,MAEIf,EAAQY,SACVR,GAAgB,iBAAO,CACrBF,WAAW,EACXa,MAAO,KAAIC,YAlBY,yDAsB5B,IAEHC,qBAAU,WACRV,IAAaW,MAAMJ,QAAQC,SAC1B,CAACR,IAGJU,qBAAU,WAAO,IAAD,EACdX,GAAY,UAAAH,EAAaU,YAAb,eAAmBR,WAAY,MAC1C,CAACF,EAAaU,OAEjBI,qBAAU,WACRE,IAAIC,KAAK,CAAEvC,MAAO,gBACjB,IAEH,IAAM1B,EAAiB,SAAC2C,EAAIrC,EAAUF,GACpC,IAAM8D,EAAI,YAAOhB,GACXiB,EAAQD,EAAKE,WAAU,SAACnE,GAAD,OAAaA,EAAQ0C,KAAOA,KACzDuB,EAAKC,GAAO7D,SAAoB,QAATF,EAAiB8D,EAAKC,GAAO7D,SAAWA,EAAWA,EAC1E6C,EAAYe,IAGRG,EAAiBrB,EAAaD,UAC9BuB,EAAeC,SAASvB,EAAaD,WAAaC,EAAaY,OAC/DY,EAAqBD,SAASvB,EAAaD,YAC3CC,EAAaY,QACbV,EAASuB,QAEf,OACE,qCACE,cAAC,IAAD,UACE,8EAEF,cAAC,IAAD,CACE9D,GAAI,CACF+D,gBAAiB,qBACjBC,SAAU,GAHd,SAME,eAAC,IAAD,CACEhE,GAAI,CACFiE,UAAW,IACX/D,QAAS,OACTgE,cAAe,UAEjB5E,QAAQ,WANV,UAQE,cAAC,IAAD,CAAY6E,MAAM,yBAClB,cAAC,IAAD,IACA,cAAC,IAAD,UACE,eAAC,IAAD,CAAOnE,GAAI,CAAEoE,SAAU,KAAvB,UACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,sBAGA,cAAC,IAAD,wBAGA,cAAC,IAAD,oBAGA,cAAC,IAAD,kBAGA,cAAC,IAAD,2BAKJ,cAAC,IAAD,UACG7B,EAAS8B,KAAI,SAAC/E,GAAD,OACZ,cAACH,EAAD,CAEEE,eAAgBA,EAChBC,QAASA,GAFJA,EAAQ0C,cAQtB0B,GACC,eAAC,IAAD,CAAK1D,GAAI,CAAEsE,EAAG,GAAd,UACE,cAAC,IAAD,CAAUC,OAAQ,KAClB,cAAC,IAAD,CAAUA,OAAQ,KAClB,cAAC,IAAD,CAAUA,OAAQ,QAGrBZ,GACC,cAAC,IAAD,CACEV,MAAOZ,EAAaY,MACpBjD,GAAI,CACFgE,SAAU,EACVQ,EAAG,KAIRX,GACC,cAAC,IAAD,CACE7D,GAAI,CACFgE,SAAU,EACVQ,EAAG,e,iCCtQnB,qDAEaC,EAAOC,YAClB,qBACEC,MAAM,6BACNC,QAAQ,YACRC,KAAK,eAHP,SAKE,sBACEC,SAAS,UACTC,EAAE,wFACFC,SAAS,cAEL,S,iCCbV,qDAEaC,EAAUP,YACrB,qBACEC,MAAM,6BACNC,QAAQ,YACRC,KAAK,eAHP,SAKE,sBACEG,SAAS,UACTD,EAAE,uSACFD,SAAS,cAEL,Y,iCCbV,qDAEaI,EAAuBR,YAClC,qBACEC,MAAM,6BACNQ,UAAU,UACVN,KAAK,OACLD,QAAQ,YACRQ,OAAO,eALT,SAOE,sBACEC,cAAc,QACdC,eAAe,QACfC,YAAa,EACbR,EAAE,gKAEE,yB,gKCVJS,EAAoBC,YAAO,MAAPA,EAAc,gBAAGC,EAAH,EAAGA,MAAH,MAAgB,CACtDzF,WAAY,SACZ8D,gBAAiB2B,EAAMC,QAAQC,QAAQ,KACvC1F,QAAS,OACTgE,cAAe,SACf2B,eAAgB,SAChBC,QAASJ,EAAMK,QAAQ,OAGZC,EAAgB,SAAC5G,GAC5B,IAAQ6D,EAA8B7D,EAA9B6D,MAAOgD,EAAuB7G,EAAvB6G,SAAa1G,EAA5B,YAAsCH,EAAtC,GAEA,OACE,eAACoG,EAAD,2BAAuBjG,GAAvB,cACE,cAAC,IAAD,CAAiBS,GAAI,CAAEM,MAAO,oBAC9B,cAAC,IAAD,CACEA,MAAM,gBACNN,GAAI,CAAEkG,GAAI,GACV5G,QAAQ,QAHV,SAKG2D,GAAS,0CAEXgD,GACC,cAAC,IAAD,CACE3F,MAAM,UACNyB,QAASkE,EACTE,UAAW,cAAC,IAAD,CAAaC,SAAS,UACjCpG,GAAI,CAAEkG,GAAI,GACV5G,QAAQ,OALV,+B,wJCvBF+G,EAA0BZ,YAAO,MAAPA,EAAc,gBAAGC,EAAH,EAAGA,MAAH,MAAgB,CAC5DzF,WAAY,SACZ8D,gBAAiB2B,EAAMC,QAAQC,QAAQ,KACvC1F,QAAS,OACTgE,cAAe,SACf2B,eAAgB,SAChBC,QAASJ,EAAMK,QAAQ,OAGZO,EAAsB,SAAClH,GAClC,IAAQmH,EAAuBnH,EAAvBmH,SAAahH,EAArB,YAA+BH,EAA/B,GAEA,OACE,eAACiH,EAAD,2BAA6B9G,GAA7B,cACE,cAAC,IAAD,CAAkBS,GAAI,CAAEM,MAAO,oBAC/B,cAAC,IAAD,CACEA,MAAM,gBACNN,GAAI,CAAEkG,GAAI,GACV5G,QAAQ,QAHV,6CAOCiH,GACC,cAAC,IAAD,CACEjG,MAAM,UACNyB,QAASwE,EACTJ,UAAW,cAAC,IAAD,CAAUC,SAAS,UAC9BpG,GAAI,CAAEkG,GAAI,GACV5G,QAAQ,YALV","file":"static/js/34.4869e041.chunk.js","sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet-async';\nimport numeral from 'numeral';\nimport {\n  Avatar,\n  Box,\n  Button,\n  Card,\n  CardHeader,\n  Divider,\n  InputBase,\n  Skeleton,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  ToggleButton,\n  ToggleButtonGroup,\n  Typography\n} from '@material-ui/core';\nimport { productApi } from '../api/product';\nimport { ResourceError } from '../components/resource-error';\nimport { ResourceUnavailable } from '../components/resource-unavailable';\nimport { Scrollbar } from '../components/scrollbar';\nimport { useMounted } from '../hooks/use-mounted';\nimport { CustomCube as CubeIcon } from '../icons/custom-cube';\nimport gtm from '../lib/gtm';\n\nconst VariantTableRow = (props) => {\n  const { onSaveQuantity, variant, ...other } = props;\n  const [mode, setMode] = useState('add');\n  const [quantity, setQuantity] = useState('');\n  const parsedQuantity = Number.parseInt(quantity, 10);\n\n  const handleModeChange = (event, newMode) => {\n    if (newMode) {\n      setMode(newMode);\n    }\n  };\n\n  const handleQuantityChange = (event) => {\n    setQuantity(event.target.value);\n  };\n\n  const handleSaveQuantity = () => {\n    onSaveQuantity?.(variant.id, parsedQuantity, mode);\n    setQuantity('');\n  };\n\n  return (\n    <TableRow {...other}>\n      <TableCell>\n        <Box\n          sx={{\n            alignItems: 'center',\n            display: 'flex'\n          }}\n        >\n          <Avatar\n            src={variant.image}\n            sx={{ mr: 2 }}\n            variant=\"rounded\"\n          >\n            <CubeIcon />\n          </Avatar>\n          <Typography\n            color=\"inherit\"\n            variant=\"body2\"\n          >\n            {variant.name}\n          </Typography>\n        </Box>\n      </TableCell>\n      <TableCell>\n        {variant.quantity}\n      </TableCell>\n      <TableCell>\n        {numeral(variant.price).format('$0,0.00')}\n      </TableCell>\n      <TableCell>\n        {variant.sku}\n      </TableCell>\n      <TableCell sx={{ width: 333 }}>\n        <Box sx={{ display: 'flex' }}>\n          <ToggleButtonGroup\n            exclusive\n            onChange={handleModeChange}\n            value={mode}\n          >\n            <ToggleButton value=\"add\">Add</ToggleButton>\n            <ToggleButton value=\"set\">Set</ToggleButton>\n          </ToggleButtonGroup>\n          <InputBase\n            inputProps={{\n              sx: {\n                px: 1.5,\n                py: 1.75\n              }\n            }}\n            onChange={handleQuantityChange}\n            sx={{\n              borderColor: 'neutral.300',\n              borderRadius: 1,\n              borderStyle: 'solid',\n              borderWidth: 1,\n              maxHeight: 48,\n              mx: 1\n            }}\n            type=\"number\"\n            value={quantity}\n          />\n          <Button\n            color=\"primary\"\n            disabled={Number.isNaN(parsedQuantity)\n            || parsedQuantity < 0\n            || (parsedQuantity === 0 && mode === 'add')}\n            onClick={handleSaveQuantity}\n            variant=\"contained\"\n          >\n            Save\n          </Button>\n        </Box>\n      </TableCell>\n    </TableRow>\n  );\n};\n\nVariantTableRow.propTypes = {\n  variant: PropTypes.object.isRequired,\n  onSaveQuantity: PropTypes.func\n};\n\nexport const ProductInventory = () => {\n  const mounted = useMounted();\n  const [productState, setProductState] = useState({ isLoading: true });\n  const [variants, setVariants] = useState([]);\n\n  const getProduct = useCallback(async () => {\n    setProductState(() => ({ isLoading: true }));\n\n    try {\n      const result = await productApi.getProduct();\n\n      if (mounted.current) {\n        setProductState(() => ({\n          isLoading: false,\n          data: result\n        }));\n      }\n    } catch (err) {\n      console.error(err);\n\n      if (mounted.current) {\n        setProductState(() => ({\n          isLoading: false,\n          error: err.message\n        }));\n      }\n    }\n  }, []);\n\n  useEffect(() => {\n    getProduct().catch(console.error);\n  }, [getProduct]);\n\n  // Variants are sent in project's data\n  useEffect(() => {\n    setVariants(productState.data?.variants || []);\n  }, [productState.data]);\n\n  useEffect(() => {\n    gtm.push({ event: 'page_view' });\n  }, []);\n\n  const onSaveQuantity = (id, quantity, mode) => {\n    const temp = [...variants];\n    const index = temp.findIndex((variant) => variant.id === id);\n    temp[index].quantity = mode === 'add' ? temp[index].quantity + quantity : quantity;\n    setVariants(temp);\n  };\n\n  const displayLoading = productState.isLoading;\n  const displayError = Boolean(!productState.isLoading && productState.error);\n  const displayUnavailable = Boolean(!productState.isLoading\n    && !productState.error\n    && !variants.length);\n\n  return (\n    <>\n      <Helmet>\n        <title>Product: Inventory | Carpatin Dashboard</title>\n      </Helmet>\n      <Box\n        sx={{\n          backgroundColor: 'background.default',\n          flexGrow: 1\n        }}\n      >\n        <Card\n          sx={{\n            minHeight: 600,\n            display: 'flex',\n            flexDirection: 'column'\n          }}\n          variant=\"outlined\"\n        >\n          <CardHeader title=\"Inventory Management\" />\n          <Divider />\n          <Scrollbar>\n            <Table sx={{ minWidth: 900 }}>\n              <TableHead>\n                <TableRow>\n                  <TableCell>\n                    Variant\n                  </TableCell>\n                  <TableCell>\n                    Inventory\n                  </TableCell>\n                  <TableCell>\n                    Price\n                  </TableCell>\n                  <TableCell>\n                    SKU\n                  </TableCell>\n                  <TableCell>\n                    Actions\n                  </TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {variants.map((variant) => (\n                  <VariantTableRow\n                    key={variant.id}\n                    onSaveQuantity={onSaveQuantity}\n                    variant={variant}\n                  />\n                ))}\n              </TableBody>\n            </Table>\n          </Scrollbar>\n          {displayLoading && (\n            <Box sx={{ p: 2 }}>\n              <Skeleton height={42} />\n              <Skeleton height={42} />\n              <Skeleton height={42} />\n            </Box>\n          )}\n          {displayError && (\n            <ResourceError\n              error={productState.error}\n              sx={{\n                flexGrow: 1,\n                m: 2\n              }}\n            />\n          )}\n          {displayUnavailable && (\n            <ResourceUnavailable\n              sx={{\n                flexGrow: 1,\n                m: 2\n              }}\n            />\n          )}\n        </Card>\n      </Box>\n    </>\n  );\n};\n","import { createSvgIcon } from '@material-ui/core/utils';\n\nexport const Plus = createSvgIcon(\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 20 20\"\n    fill=\"currentColor\"\n  >\n    <path\n      fillRule=\"evenodd\"\n      d=\"M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z\"\n      clipRule=\"evenodd\"\n    />\n  </svg>, 'Plus'\n);\n","import { createSvgIcon } from '@material-ui/core/utils';\n\nexport const Refresh = createSvgIcon(\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 20 20\"\n    fill=\"currentColor\"\n  >\n    <path\n      clipRule=\"evenodd\"\n      d=\"M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z\"\n      fillRule=\"evenodd\"\n    />\n  </svg>, 'Refresh'\n);\n","import { createSvgIcon } from '@material-ui/core/utils';\n\nexport const QuestionMarkOutlined = createSvgIcon(\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    className=\"h-6 w-6\"\n    fill=\"none\"\n    viewBox=\"0 0 24 24\"\n    stroke=\"currentColor\"\n  >\n    <path\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth={2}\n      d=\"M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n    />\n  </svg>, 'QuestionMarkOutlined'\n);\n","import PropTypes from 'prop-types';\nimport { Button, Typography } from '@material-ui/core';\nimport { styled } from '@material-ui/core/styles';\nimport { ExclamationOutlined as ExclamationIcon } from '../icons/exclamation-outlined';\nimport { Refresh as RefreshIcon } from '../icons/refresh';\n\nconst ResourceErrorRoot = styled('div')(({ theme }) => ({\n  alignItems: 'center',\n  backgroundColor: theme.palette.neutral[100],\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'center',\n  padding: theme.spacing(3)\n}));\n\nexport const ResourceError = (props) => {\n  const { error, onReload, ...other } = props;\n\n  return (\n    <ResourceErrorRoot {...other}>\n      <ExclamationIcon sx={{ color: 'text.secondary' }} />\n      <Typography\n        color=\"textSecondary\"\n        sx={{ mt: 2 }}\n        variant=\"body2\"\n      >\n        {error || 'Error loading data, please try again.'}\n      </Typography>\n      {onReload && (\n        <Button\n          color=\"primary\"\n          onClick={onReload}\n          startIcon={<RefreshIcon fontSize=\"small\" />}\n          sx={{ mt: 2 }}\n          variant=\"text\"\n        >\n          Reload Data\n        </Button>\n      )}\n    </ResourceErrorRoot>\n  );\n};\n\nResourceError.propTypes = {\n  error: PropTypes.string,\n  onReload: PropTypes.func\n};\n","import PropTypes from 'prop-types';\nimport { Button, Typography } from '@material-ui/core';\nimport { styled } from '@material-ui/core/styles';\nimport { Plus as PlusIcon } from '../icons/plus';\nimport { QuestionMarkOutlined as QuestionMarkIcon } from '../icons/question-mark-outlined';\n\nconst ResourceUnavailableRoot = styled('div')(({ theme }) => ({\n  alignItems: 'center',\n  backgroundColor: theme.palette.neutral[100],\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'center',\n  padding: theme.spacing(3)\n}));\n\nexport const ResourceUnavailable = (props) => {\n  const { onCreate, ...other } = props;\n\n  return (\n    <ResourceUnavailableRoot {...other}>\n      <QuestionMarkIcon sx={{ color: 'text.secondary' }} />\n      <Typography\n        color=\"textSecondary\"\n        sx={{ mt: 2 }}\n        variant=\"body2\"\n      >\n        There are not objects here yet.\n      </Typography>\n      {onCreate && (\n        <Button\n          color=\"primary\"\n          onClick={onCreate}\n          startIcon={<PlusIcon fontSize=\"small\" />}\n          sx={{ mt: 2 }}\n          variant=\"contained\"\n        >\n          Create Object\n        </Button>\n      )}\n    </ResourceUnavailableRoot>\n  );\n};\n\nResourceUnavailable.propTypes = {\n  onCreate: PropTypes.func\n};\n"],"sourceRoot":""}